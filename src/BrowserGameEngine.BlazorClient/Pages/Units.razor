@page "/units"
@using BrowserGameEngine.Shared
@inject HttpClient Http
@inject NavigationManager Nav

<h1>Einheiten</h1>

@if (model == null) {
    <p><em>Loading...</em></p>
} else {
    if (!string.IsNullOrEmpty(lastError)) {
        <span class="error">@lastError</span>
    }

    <button class="btn btn-primary" @onclick="MergeAll">
        Truppen zusammenführen
    </button>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Anzahl</th>
                <th>Eigenschaften</th>
                <th>Position</th>
            </tr>
        </thead>
        <tbody>
            @if (model.Units != null) {
                @foreach (var item in model.Units.OrderByDescending(x => x.Count).ThenBy(x => x.Definition.Name)) {
                    <tr>
                        <td>@item.Definition?.Name</td>
                        <td>@item.Count</td>
                        <td><_UnitProperties UnitDef="item.Definition" /></td>
                        <td>@item.PositionPlayerId</td>
                        <td>
                            <button class="btn btn-primary" @onclick="async () => await Merge(item.Definition.Id)">
                                Truppen dieses Typs zusammenführen
                            </button>

                            @if (item.Count > 1) {
                                @if (!IsShowSplit(item.UnitId)) {
                                    <button class="btn btn-primary" @onclick="() => ToggleShowSplit(item.UnitId)">
                                        Truppen aufteilen
                                    </button>
                                } else {
                                    <_SplitUnitForm UnitId="item.UnitId" SplitDoneEvent="Update" InitCount="item.Count / 2" />
                                }
                            }
                            <NavLink class="nav-link" href="@($"selectenemy/{item.UnitId}")">Angriff</NavLink>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private UnitsViewModel? model;
    private string? lastError;
    private Dictionary<Guid, bool> showSplit = new();

    protected override async Task OnInitializedAsync() {
        await Update();
    }

    private async Task Update() {
        showSplit = new();
        model = await Http.GetFromJsonAsync<UnitsViewModel>("api/units");
    }

    private async Task MergeAll(MouseEventArgs e) {
        var response = await Http.PostAsync("api/units/merge", null);
        if (response.IsSuccessStatusCode) {
            await Update();
        } else {
            var error = await response.Content.ReadAsStringAsync();
            lastError = error;
        }
    }

    private async Task Merge(string unitDefId) {
        var response = await Http.PostAsync($"api/units/merge?unitDefId={unitDefId}", null);
        if (response.IsSuccessStatusCode) {
            await Update();
        } else {
            var error = await response.Content.ReadAsStringAsync();
            lastError = error;
        }
    }

    private bool IsShowSplit(Guid unitId) {
        if (showSplit.TryGetValue(unitId, out bool value)) {
            return value;
        }
        return false;
    }

    private void ToggleShowSplit(Guid unitId) {
        showSplit[unitId] = !IsShowSplit(unitId);
    }
}
