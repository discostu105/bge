@page "/base"
@using BrowserGameEngine.Shared
@inject HttpClient Http

<h1>Basis</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (assets == null) {
    <p><em>Loading...</em></p>
} else {
    if (!string.IsNullOrEmpty(lastError)) {
        <span class="error">@lastError</span>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Gebaut</th>
                <th>Name</th>
                <th>Kosten</th>
                <th>Verfügbar</th>
                <th>Wird gebaut</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (assets.Assets != null) {
                @foreach (var item in assets.Assets) {
                    <tr>
                        <td>@item.Built</td>
                        <td>@item.Definition?.Name</td>
                        <td><_Cost Cost="@item.Cost" /></td>
                        <td>@item.PrerequisitesMet</td>
                        <td>@item.AlreadyQueued</td>
                        <td>
                            <button class="btn btn-primary" @onclick="(e) => BuildAsset(item)">
                                Bauen
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private AssetsViewModel? assets;
    private string? lastError;

    protected override async Task OnInitializedAsync() {
        await Update();
    }

    private async Task BuildAsset(AssetViewModel asset) {
        var response = await Http.PostAsJsonAsync($"api/assets/build?assetDefId={asset.Definition.Id}", "");
        if (response.IsSuccessStatusCode) {
            await Update();
        } else {
            var error = await response.Content.ReadAsStringAsync();
            lastError = error;
        }
    }

    private async Task Update() {
        assets = await Http.GetFromJsonAsync<AssetsViewModel>("api/assets");
    }
}
