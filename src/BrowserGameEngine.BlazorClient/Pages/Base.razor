@page "/base"
@using BrowserGameEngine.Shared
@inject HttpClient Http

<h1>Basis</h1>

<div class="container">

    @if (model == null) {
        <p><em>Lade...</em></p>
    } else {
        if (!string.IsNullOrEmpty(lastError)) {
            <span class="error">@lastError</span>
        }

        @if (model.Assets != null) {
            <div class="row">
                @foreach (var item in model.Assets) {
                    <div class="col-md-4 bge-asset @(item.Built ? "available" : "unavailable")">
                        <h2>@item.Definition?.Name</h2>

                        @if (item.Built) {
                            <span>Bereits gebaut!</span>

                            <div class="bge-recruiting">
                                <_BuildUnitsForm AvailableUnits="item.AvailableUnits" />
                            </div>

                        } else if (item.AlreadyQueued) {
                            <span>Wird in @item.TicksLeftForBuild Runden fertig sein.</span>
                        } else {
                            <div>Kosten: <_Cost Cost="@item.Cost" /></div>
                            <div>Benötigt: @item.Prerequisites </div>
                            @if (item.PrerequisitesMet && item.CanAfford) {
                                <div>
                                    <button class="btn btn-primary" @onclick="(e) => BuildAsset(item)">
                                        Bauen
                                    </button>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    }
</div>

@code {


    private AssetsViewModel? model;
    private string? lastError;

    protected override async Task OnInitializedAsync() {
        await Update();
    }

    private async Task BuildAsset(AssetViewModel asset) {
        var response = await Http.PostAsJsonAsync($"api/assets/build?assetDefId={asset.Definition.Id}", "");
        if (response.IsSuccessStatusCode) {
            await Update();
        } else {
            var error = await response.Content.ReadAsStringAsync();
            lastError = error;
        }
    }

    private async Task Update() {
        model = await Http.GetFromJsonAsync<AssetsViewModel>("api/assets");
    }

}
