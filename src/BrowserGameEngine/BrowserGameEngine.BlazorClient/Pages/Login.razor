@page "/login"
@using BrowserGameEngine.Shared
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager NavManager
@inject HttpClient Http


@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        <a href="authentication/profile">Hello, @context.User.Identity.Name!</a>
        <button class="nav-link btn btn-link" @onclick="BeginSignOut">Log out</button>
    </Authorized>
    <NotAuthorized>
        <button type="button" class="btn btn-primary" @onclick="LoginClick">Discord Auth</button>
    </NotAuthorized>
</AuthorizeView>

<p>code: @authCode</p>
<p>jwt token: @jwttoken</p>

@code {
    private string authCode = null;
    private string jwttoken = null;

    protected override async Task OnInitializedAsync() {
        var query = new Uri(NavManager.Uri).Query;

        if (QueryHelpers.ParseQuery(query).TryGetValue("code", out var value)) {
            authCode = value;
            await OAuthLogin(value);
        }
    }

    private async Task LoginClick(MouseEventArgs e) {
        var loginData = await Http.GetFromJsonAsync<LoginDataViewModel>("api/login/logindata");
        NavManager.NavigateTo(loginData.OAuthUrl);
    }

    private async Task OAuthLogin(string code) {
        var userModel = await Http.GetFromJsonAsync<UserModel>($"api/login/oauthlogin/{code}");
        jwttoken = userModel.JwtToken;
    }

    private async Task BeginSignOut(MouseEventArgs args) {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}